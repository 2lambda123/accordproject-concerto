@startuml
title
Model
endtitle
class org.hyperledger.composer.system.Asset << (A,green) >> {
}
class org.hyperledger.composer.system.Participant << (P,lightblue) >> {
}
class org.hyperledger.composer.system.Transaction << (T,yellow) >> {
   + String transactionId
   + DateTime timestamp
}
class org.hyperledger.composer.system.Event {
   + String eventId
   + DateTime timestamp
}
class org.hyperledger.composer.system.Registry << (A,green) >> {
   + String registryId
   + String name
   + String type
   + Boolean system
}
org.hyperledger.composer.system.Registry --|> org.hyperledger.composer.system.Asset
class org.hyperledger.composer.system.AssetRegistry << (A,green) >> {
}
org.hyperledger.composer.system.AssetRegistry --|> org.hyperledger.composer.system.Registry
class org.hyperledger.composer.system.ParticipantRegistry << (A,green) >> {
}
org.hyperledger.composer.system.ParticipantRegistry --|> org.hyperledger.composer.system.Registry
class org.hyperledger.composer.system.TransactionRegistry << (A,green) >> {
}
org.hyperledger.composer.system.TransactionRegistry --|> org.hyperledger.composer.system.Registry
class org.hyperledger.composer.system.Network << (A,green) >> {
   + String networkId
   + String runtimeVersion
}
org.hyperledger.composer.system.Network --|> org.hyperledger.composer.system.Asset
class org.hyperledger.composer.system.NetworkAdmin << (P,lightblue) >> {
   + String participantId
}
org.hyperledger.composer.system.NetworkAdmin --|> org.hyperledger.composer.system.Participant
class org.hyperledger.composer.system.HistorianRecord << (A,green) >> {
   + String transactionId
   + String transactionType
   + Transaction transactionInvoked
   + Participant participantInvoking
   + Identity identityUsed
   + Event[] eventsEmitted
   + DateTime transactionTimestamp
}
org.hyperledger.composer.system.HistorianRecord --|> org.hyperledger.composer.system.Asset
class org.hyperledger.composer.system.RegistryTransaction << (T,yellow) >> {
   + Registry targetRegistry
}
org.hyperledger.composer.system.RegistryTransaction --|> org.hyperledger.composer.system.Transaction
class org.hyperledger.composer.system.AssetTransaction << (T,yellow) >> {
   + Asset[] resources
}
org.hyperledger.composer.system.AssetTransaction --|> org.hyperledger.composer.system.RegistryTransaction
class org.hyperledger.composer.system.ParticipantTransaction << (T,yellow) >> {
   + Participant[] resources
}
org.hyperledger.composer.system.ParticipantTransaction --|> org.hyperledger.composer.system.RegistryTransaction
class org.hyperledger.composer.system.AddAsset << (T,yellow) >> {
}
org.hyperledger.composer.system.AddAsset --|> org.hyperledger.composer.system.AssetTransaction
class org.hyperledger.composer.system.UpdateAsset << (T,yellow) >> {
}
org.hyperledger.composer.system.UpdateAsset --|> org.hyperledger.composer.system.AssetTransaction
class org.hyperledger.composer.system.RemoveAsset << (T,yellow) >> {
   + String[] resourceIds
}
org.hyperledger.composer.system.RemoveAsset --|> org.hyperledger.composer.system.AssetTransaction
class org.hyperledger.composer.system.AddParticipant << (T,yellow) >> {
}
org.hyperledger.composer.system.AddParticipant --|> org.hyperledger.composer.system.ParticipantTransaction
class org.hyperledger.composer.system.UpdateParticipant << (T,yellow) >> {
}
org.hyperledger.composer.system.UpdateParticipant --|> org.hyperledger.composer.system.ParticipantTransaction
class org.hyperledger.composer.system.RemoveParticipant << (T,yellow) >> {
   + String[] resourceIds
}
org.hyperledger.composer.system.RemoveParticipant --|> org.hyperledger.composer.system.ParticipantTransaction
class org.hyperledger.composer.system.IdentityState << (E,grey) >> {
   + ISSUED
   + BOUND
   + ACTIVATED
   + REVOKED
}
class org.hyperledger.composer.system.Identity << (A,green) >> {
   + String identityId
   + String name
   + String issuer
   + String certificate
   + IdentityState state
   + Participant participant
}
org.hyperledger.composer.system.Identity --|> org.hyperledger.composer.system.Asset
class org.hyperledger.composer.system.IssueIdentity << (T,yellow) >> {
   + Participant participant
   + String identityName
}
org.hyperledger.composer.system.IssueIdentity --|> org.hyperledger.composer.system.Transaction
class org.hyperledger.composer.system.BindIdentity << (T,yellow) >> {
   + Participant participant
   + String certificate
}
org.hyperledger.composer.system.BindIdentity --|> org.hyperledger.composer.system.Transaction
class org.hyperledger.composer.system.ActivateCurrentIdentity << (T,yellow) >> {
}
org.hyperledger.composer.system.ActivateCurrentIdentity --|> org.hyperledger.composer.system.Transaction
class org.hyperledger.composer.system.RevokeIdentity << (T,yellow) >> {
   + Identity identity
}
org.hyperledger.composer.system.RevokeIdentity --|> org.hyperledger.composer.system.Transaction
class org.hyperledger.composer.system.StartBusinessNetwork << (T,yellow) >> {
   + String logLevel
   + Transaction[] bootstrapTransactions
}
org.hyperledger.composer.system.StartBusinessNetwork --|> org.hyperledger.composer.system.Transaction
class org.hyperledger.composer.system.ResetBusinessNetwork << (T,yellow) >> {
}
org.hyperledger.composer.system.ResetBusinessNetwork --|> org.hyperledger.composer.system.Transaction
class org.hyperledger.composer.system.SetLogLevel << (T,yellow) >> {
   + String newLogLevel
}
org.hyperledger.composer.system.SetLogLevel --|> org.hyperledger.composer.system.Transaction
class com.hyperledger.composer.animaltracking.AnimalType << (E,grey) >> {
   + SHEEP_GOAT
   + CATTLE
   + PIG
   + DEER_OTHER
}
class com.hyperledger.composer.animaltracking.MovementStatus << (E,grey) >> {
   + IN_FIELD
   + IN_TRANSIT
}
class com.hyperledger.composer.animaltracking.ProductionType << (E,grey) >> {
   + MEAT
   + WOOL
   + DAIRY
   + BREEDING
   + OTHER
}
class com.hyperledger.composer.animaltracking.User << (P,lightblue) >> {
   + String email
   + String firstName
   + String lastName
}
com.hyperledger.composer.animaltracking.User --|> org.hyperledger.composer.system.Participant
class com.hyperledger.composer.animaltracking.Farmer << (P,lightblue) >> {
   + String address1
   + String address2
   + String county
   + String postcode
   + Business business
}
com.hyperledger.composer.animaltracking.Farmer --|> com.hyperledger.composer.animaltracking.User
class com.hyperledger.composer.animaltracking.Regulator << (P,lightblue) >> {
}
com.hyperledger.composer.animaltracking.Regulator --|> com.hyperledger.composer.animaltracking.User
class com.hyperledger.composer.animaltracking.Field << (A,green) >> {
   + String cph
   + String name
   + Business business
}
com.hyperledger.composer.animaltracking.Field --|> org.hyperledger.composer.system.Asset
class com.hyperledger.composer.animaltracking.Animal << (A,green) >> {
   + String animalId
   + AnimalType species
   + MovementStatus movementStatus
   + ProductionType productionType
   + Field location
   + Farmer owner
}
com.hyperledger.composer.animaltracking.Animal --|> org.hyperledger.composer.system.Asset
class com.hyperledger.composer.animaltracking.Business << (A,green) >> {
   + String sbi
   + String address1
   + String address2
   + String county
   + String postcode
   + Farmer owner
   + Animal[] incomingAnimals
}
com.hyperledger.composer.animaltracking.Business --|> org.hyperledger.composer.system.Asset
class com.hyperledger.composer.animaltracking.AnimalMovement << (T,yellow) >> {
   + String[] logs
   + Animal animal
   + Business from
   + Business to
}
com.hyperledger.composer.animaltracking.AnimalMovement --|> org.hyperledger.composer.system.Transaction
class com.hyperledger.composer.animaltracking.AnimalMovementDeparture << (T,yellow) >> {
   + Field fromField
}
com.hyperledger.composer.animaltracking.AnimalMovementDeparture --|> com.hyperledger.composer.animaltracking.AnimalMovement
class com.hyperledger.composer.animaltracking.AnimalMovementArrival << (T,yellow) >> {
   + Field arrivalField
}
com.hyperledger.composer.animaltracking.AnimalMovementArrival --|> com.hyperledger.composer.animaltracking.AnimalMovement
@enduml
