[{"fileName":"system.cto","external":false,"definitions":"/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nnamespace system\n\nevent Event {\n}\n\nparticipant Participant {\n}\n\nasset Asset {\n}\n\ntransaction Transaction {\n}\n\n/**\n * Abstract system participant that all participants extend.\n * Has no properties, and is soley used as a basis to model other assets.\n */\n@docs('participant.md')\nabstract participant ComposerParticipant identified by participantId {\n  o String participantId\n}\nabstract transaction ComposerTransaction identified by transactionId {\n  o String transactionId\n}\n\n/**\n * Abstract Registry asset, that is used as the basis for all types of registries.\n *\n * @param {String} registryId identity\n * @param {String} name Name of the registry\n * @param {String} type type of the registry\n * @param {Boolean} system Is this a system registry?\n */\n@docs('registry.md')\nabstract asset Registry identified by registryId {\n  o String registryId\n  o String name\n  o String type\n  o Boolean system\n}\n\n/**\n * AssetRegistry extends the Registry to define the type that of all registries\n * that are primarily intended for storing Assets.\n *\n */\n@docs('assetRegistry.md')\nasset AssetRegistry extends Registry { }\n\n/**\n * ParticipantRegistry extends the Registry to define the type that of all registries\n * that are primarily intended for storing Participants\n */\n@docs('participantRegistry.md')\nasset ParticipantRegistry extends Registry { }\n\n/**\n * TransactionRegistry extends the Registry to define the type that of all registries\n * that are primarily intended for storing Transactions\n */\n@docs('transactionRegistry.md')\nasset TransactionRegistry extends Registry { }\n\n\n/**\n * Asset to represent the idea of a Business Network.\n * All actions will require participants to have access to this Asset. Failure to have at least *READ* access\n * will mean that participants are unable to access the network.\n *\n * Participants who are authorized administrators, can be granted *UPDATE* and/or *DELETE* permissions\n\n * @param {String} networkId of the business network\n */\n@docs('network.md')\nasset Network identified by networkId {\n  o String networkId\n  o String runtimeVersion\n}\n\n/**\n * A predefined participant that can be given the authority to adiminister the Business Network\n *\n * @param {String} participantId Identifier fields of the participant\n */\n@docs('networkAdmin.md')\nparticipant NetworkAdmin identified by participantId {\n    o String participantId\n}\n\n// -----------------------------------------------------------------------------\n// Historian\n\n/**\n * Asset to represent each historian registry entry\n *\n * @param {String} transactionId Using the transaction id as the uuid\n * @param {ComposerTransaction} transactionInvoked Relationship to transaction\n * @param {Participant} participantInvoking Participant who invoked this transaction\n * @param {Identity} identityUsed The identity that was used by the participant\n * @param {Event[]} eventsEmitted The events that were emitted by this transactionId\n * @param {DateTime} transactionTimestamp Use the transaction's timestamp\n */\n@docs('historian.md')\n@docsuri('Composer Documentation','../business-network/historian')\nasset HistorianRecord identified by transactionId {\n  o String                transactionId\n  o String                transactionType\n  --> ComposerTransaction         transactionInvoked\n  --> ComposerParticipant participantInvoking  optional\n  --> Identity            identityUsed         optional\n  o Event[]               eventsEmitted        optional\n  o DateTime              transactionTimestamp\n}\n\n// -----------------------------------------------------------------------------\n// System transactions that act on Registries of any type\n/**\n * An abstract definition of a transaction that affects a registry in some way\n * @param {Registry} targetRegistry Registry that will be manipulated\n */\n@docs('registryTransaction.md')\nabstract transaction RegistryTransaction identified by transactionId {\n  o String transactionId\n  --> Registry targetRegistry\n}\n\n/**\n * An abstract definition of a transaction that affects assets in a registry in some way\n * @param {Asset[]} resources Resources that will be manipulated\n */\n@docs('assetTransaction.md')\nabstract transaction AssetTransaction extends RegistryTransaction {\n   o Asset[] resources\n}\n\n/**\n * An abstract definition of a transaction that affects participants in a registry in some way\n * @param {Participant[]} resources participants that will be manipulated\n */\n@docs('participantTransaction.md')\nabstract transaction ParticipantTransaction extends RegistryTransaction {\n  o Participant[] resources\n}\n\n/**\n * Transaction that will add asset(s) to a registry\n */\ntransaction AddAsset extends AssetTransaction { }\n\n/**\n * Transaction that will update asset(s) in a registry\n */\ntransaction UpdateAsset extends AssetTransaction { }\n\n/**\n * Transaction that will remove asset(s) from a registry\n * @param {String[]} resourceIds Identifiers of the assets to remove\n */\ntransaction RemoveAsset extends AssetTransaction {\n o String[] resourceIds\n}\n\n/**\n * Transaction that will add participants(s) to a registry\n */\ntransaction AddParticipant extends ParticipantTransaction { }\n\n/**\n * Transaction that will update participants(s) in a registry\n */\ntransaction UpdateParticipant extends ParticipantTransaction { }\n\n/**\n * Transaction that will remove participants(s) from a registry\n * @param {String[]} resourceIds Identifiers of the participants to remove\n */\ntransaction RemoveParticipant extends ParticipantTransaction {\n o String[] resourceIds\n}\n\n\n// -----------------------------------------------------------------------------\n// Identity\n\n/** The valid states of an identity\n * @enum {ISSUED} identity has been issued\n * @enum {BOUND} identity has been bound to a participant\n * @enum {ACTIVATED} identity has been activated\n * @enum {REVOKED} identity has been revoked\n */\n@docs('identityState.md')\nenum IdentityState {\n    o ISSUED\n    o BOUND\n    o ACTIVATED\n    o REVOKED\n}\n\n/**\n * Asset representing the idea of an Identity\n *\n * @param {String} identityId   Unique Identifiers\n * @param {String} name         Name given to this identity\n * @param {String} issuer       The issuer\n * @param {String} certificate  The certificate\n * @param {IdentityState} state      State the identity is in\n * @param {Participant} participant  Associated participant\n */\n@docs('identity.md')\nasset Identity identified by identityId {\n    o String identityId\n    o String name\n    o String issuer\n    o String certificate\n    o IdentityState state\n    --> ComposerParticipant participant\n}\n\n/**\n * Transaction that will issue the identity\n * @param {Participant} participant to issue the identity to\n * @param {String} identityName  name to use for this identity\n */\n@docs('issueIdentity.md')\ntransaction IssueIdentity identified by transactionId {\n   o String transactionId\n    --> ComposerParticipant participant\n    o String identityName\n}\n\n/**\n * Transaction that will bind the identity\n * @param {Participant} participant to issue bind identity to\n * @param {String} certificate to use\n */\n@docs('bindIdentity.md')\ntransaction BindIdentity identified by transactionId {\n    o String transactionId\n    --> ComposerParticipant participant\n    o String certificate\n}\n\n/**\n * Transaction that will activate the current the identity\n */\n@docs('activateIdentity.md')\ntransaction ActivateCurrentIdentity identified by transactionId {\n  o String transactionId\n}\n\n/**\n * Transaction that will revoke the identity\n * @param {Identity} identity to revoke\n */\n@docs('revokeIdentity.md')\ntransaction RevokeIdentity {\n    --> Identity identity\n}\n\n/**\n * Transaction that will Start a business network\n * @param {Transaction[]} [bootstrapTransactions] optional transactions to use to bootstrap the network\n * @param {String} [logLevel] Log level to use optionally\n *\n */\n@docs('startBusinessNetwork.md')\ntransaction StartBusinessNetwork {\n  o String logLevel optional\n  o Transaction[] bootstrapTransactions optional\n}\n\n/**\n * Transaction that will Reset a business network. This removes all the data but leaves the structure of the business network intact\n */\n@docs('resetBusinessNetwork.md')\ntransaction ResetBusinessNetwork {\n\n}\n\n/**\n * Sets the log level of the Business Network runtime to that specified\n * @param {String} newLogLevel a valid debug string\n */\n@docs('setLogLevel.md')\ntransaction SetLogLevel {\n  o String newLogLevel\n}\n"},{"fileName":"internal.cto","external":false,"definitions":"namespace org.acme\nimport org.external.* from github://external.cto\n\nconcept Bar {\n    o Foo foo\n}"},{"fileName":"@external.cto","external":true,"definitions":"namespace org.external\n            concept Foo{ o String baz }"}]